import botometer
import tweepy
import csv
import argparse
import sys
import os
import time
from colorama import Fore
from colorama import init
init()

### API Keys and Botometer setup
rapidapi_key = ''
twitter_app_auth = {
    'consumer_key': '',
    'consumer_secret': '',
    'access_token': '',
    'access_token_secret': '',
  }

botometer_api_url = 'https://botometer-pro.p.rapidapi.com'

#Twitter Auth for Botometer rapidapi 
bom = botometer.Botometer(botometer_api_url=botometer_api_url,
                          wait_on_ratelimit=True,
                          rapidapi_key=rapidapi_key,
                          **twitter_app_auth)

#Twitter Auth for Tweepy
auth = tweepy.OAuthHandler(twitter_app_auth['consumer_key'], twitter_app_auth['consumer_secret'])
auth.set_access_token(twitter_app_auth['access_token'], twitter_app_auth['access_token_secret'])
tweepy_api = tweepy.API(auth)

### Parser
parser = argparse.ArgumentParser(description="Simple script to automate bot search with Botometer")
parser.add_argument('-u', '--username', help='Check a single username')
parser.add_argument('-g', '--filename_gephi', help='Check users from csv file generated by gehpi (export from Data Labolatory)')
parser.add_argument('-l', '--filename_list', help='Check users from text file where every new line is one account')

args = parser.parse_args()

if len(sys.argv) < 2:
    parser.print_help()
    sys.exit(1)


### Bulk bot checker function
def bot_check(accounts):
  bots = []
  bots_count = 0
  suspicious = []
  suspicious_count = 0
  humans = []
  humans_count = 0
  locked = []
  locked_count = 0
  empty = []
  empty_count = 0
  score_sum = 0
  no_accounts = len(accounts)
  followers_count_treshold = 10
  small_followers_count = 0
  fresh_accounts_count = 0 
  results = {}
  
  try:
    for screen_name, result in bom.check_accounts_in(accounts):
      if 'display_scores' in result:
        bot_score = result['display_scores']['universal']
        score_sum += bot_score
        if bot_score < 2:
          color = Fore.GREEN
          humans.append(screen_name)
          humans_count += 1
        if bot_score > 2 and bot_score < 3.5:
          color = Fore.YELLOW
          suspicious.append(screen_name)
          suspicious_count += 1
        if bot_score > 3.5:
          color = Fore.RED
          bots.append(screen_name)
          bots_count += 1

        user = tweepy_api.get_user(screen_name)
        
        account_age = int((int(time.time()) - int(user.created_at.timestamp()))/60/60/24) 
        
        if user.followers_count < followers_count_treshold:
          small_followers_count += 1
        if account_age < 31:
          fresh_accounts_count += 1
        
        print(f'{color}{screen_name}, score: {bot_score}, created: {user.created_at}, followers: {user.followers_count}, following: {user.friends_count}, verified: {user.verified}, url: {user.url}{Fore.RESET}')

      elif 'error' in result:
        if result['error'] == "TweepError: Not authorized.":
          color = Fore.MAGENTA
          locked.append(screen_name)
          locked_count += 1
          print(f'{color}{screen_name}, locked account.{Fore.RESET}')

        if result['error'] == "NoTimelineError: ":
          color = Fore.RED
          empty.append(screen_name)
          empty_count += 1
          print(f'{color}{screen_name}, empty account.{Fore.RESET}')

    results.update({'bots':bots, 
                    'bots_count':bots_count, 
                    'suspicious':suspicious, 
                    'suspicious_count':suspicious_count, 
                    'humans':humans, 
                    'humans_count':humans_count,
                    'locked':locked,
                    'locked_count':locked_count,
                    'empty':empty,
                    'empty_count':empty_count,
                    'score_sum':score_sum,
                    'no_accounts':no_accounts,
                    'followers_count_treshold':followers_count_treshold,
                    'small_followers_count':small_followers_count,
                    'fresh_accounts_count':fresh_accounts_count,})
  except Exception as e:
    print(f'Error message: {e}')
  
  return(results)

def summary(results):
  print(f'''
  Finished. Total users checked: {results["no_accounts"]}
  Bots: {results["bots_count"]}
  No timeline accounts: {results["empty_count"]}
  Suscpicious accounts: {results["suspicious_count"]}
  Locked accounts: {results["locked_count"]}
  Humans: {results["humans_count"]}
  Shadiness: {round((results["bots_count"]+results["empty_count"]+results["suspicious_count"])*100/results["no_accounts"], 2)} % (ratio bot/suspicious vs. human)
  Network mean score: {round(results["score_sum"]/results["no_accounts"],2)}

  Accounts younger than 30 days: {results['fresh_accounts_count']}
  Accounts with less than {results['followers_count_treshold']} followers: {results['small_followers_count']}
  ''')

### Search based on one username
if args.username:
  try:
    result = bom.check_account(args.username)
    if 'display_scores' in result:
      bot_score = result['display_scores']['universal']
      if bot_score < 2:
        color = Fore.GREEN
      if bot_score > 2 and bot_score < 3.5:
        color = Fore.YELLOW
      if bot_score > 3.5:
        color = Fore.RED
      print(f'{color}{args.username}, {bot_score}{Fore.RESET}')

      user = tweepy_api.get_user(args.username)
      print(f'{color}@{args.username}, score: {bot_score}, created: {user.created_at}, followers: {user.followers_count}, following: {user.friends_count}, verified: {user.verified}, url: {user.url}{Fore.RESET}')

    elif 'error' in result:
      if result['error'] == "TweepError: Not authorized.":
        color = Fore.MAGENTA
        print(f'{color}{args.username}, locked account.{Fore.RESET}')

      if result['error'] == "NoTimelineError: ":
        color = Fore.RED
        print(f'{color}{args.username}, empty account.{Fore.RESET}')
  except Exception as e:
    print(f'Error message: {e}')

### Search based on gephi csv file
if args.filename_gephi:
  accounts = []
  with open(args.filename_gephi, 'r') as f:
    mycsv = csv.reader(f)
    next(f)
    for row in mycsv:
      username = f'@{row[1]}'
      accounts.append(username)
  results = bot_check(accounts)
  summary(results)
  
### Get results from regular text file (one user per line)
if args.filename_list:
  with open(args.filename_list, 'r') as f:
    accounts = f.read().splitlines()  
  results = bot_check(accounts)
  summary(results)

### That's all folks ###